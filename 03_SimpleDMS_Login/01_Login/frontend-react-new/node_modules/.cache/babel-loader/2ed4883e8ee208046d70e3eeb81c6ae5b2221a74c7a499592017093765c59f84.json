{"ast":null,"code":"/* C:\\Work\\07_Si\\03_SimpleDMS_Login\\01_Login\\frontend-react-new\\src\\store\\slices\\auth.ts */\n// TODO: import\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport authService from \"../../services/auth/authService\";\n// 로컬스토리지에서 user 라는 키이름으로 값 가져오기 : 결과 (문자열) -> 객체로 변환\n// user : 웹토큰 있음\n// 사용법 : JSON.parse(문자열객체) => 문자열객체 -> 실제객체로 변환\nconst user = JSON.parse(localStorage.getItem(\"user\") || \"null\");\n// TODO: ------------------- 공유함수 정의 ---------------------\n// TODO: 회원가입 공유함수 (비동기함수) :\n//  TODO :코드 해석:\n//  createAsyncThunk(함수명, 화살표함수(변수, thunkAPI)=>{실행문}) - 리덕스 비동기 함수 적용\n//  thunkAPI 역할 : 에러메세지 처리 -> thunkAPI.rejectWithValue(에러메세지)\n//  async () => { await 함수명 };\n\n// 비동기함수 처리방법(2가지)\n// 1) 비동기함수 처리 : promise -> 함수실행.then().catch() TODO: 채택\n// 2) 비동기함수 처리 : async () => { await 함수실행 }\nexport const register = createAsyncThunk(\"auth/register\", async (user, thunkAPI) => {\n  try {\n    const response = await authService.register(user); // 회원가입함수 실행\n    return response.data; // 백엔드 결과값\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(\"register 시 에러가 발생하였습니다.\");\n  }\n});\n\n// TODO : 로그인 공유함수(비동기함수)\nexport const login = createAsyncThunk(\"auth/login\",\n// 함수명\nasync (user, thunkAPI) => {\n  // 비동기함수\n  try {\n    const data = await authService.login(user); // 백엔드 login 요청\n    return {\n      user: data\n    }; // 백엔드 결과\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(\"login 시 에러가 발행했습니다.\");\n  }\n});\n\n// TODO : 로그아웃 공유함수(비동기함수)\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await authService.logout(); // 로그아웃 함수 실행(리턴값 없음)\n});\n\n// TODO: ------------------- 공유변수 정의 ---------------------\n// TODO : 공유변수 초기값 정의 : { isLoggedIn: true/false, user: user/null }\n// TODO : user <= 로컬스토리지의 값\n// user 가 있으면(로그인했으면) initialState = { isLoggedIn: true, user: user }\n// user 가 없으면(로그아웃했으면) initialState = { isLoggedIn: false, user: null }\nconst initialState = user ? {\n  isLoggedIn: true,\n  user\n} : {\n  isLoggedIn: false,\n  user: null\n};\n\n/* TODO: 현재 계정의 접속 상태 관리 코드 */\n// todo: 실제 공유저장소 (리듀서 정의) : 공유변수의 값을 정의\nconst authSlice = createSlice({\n  name: \"auth\",\n  // 리듀서 이름 : auth\n  initialState,\n  // 위에서 3항연산자로 정의한 초기객체\n  reducers: {},\n  // 동기함수 정의할때 사용하는 속성\n  // todo : 사용법 builder.addCase(비동기함수명.fulfilled, 화살표함수) : 비동기함수 성공시  화살표함수 실행됨\n  // todo : 사용법 builder.addCase(비동기함수명.rejected, 화살표함수)  : 비동기함수 실패시  화살표함수 실행됨\n  extraReducers: builder => {\n    // 비동기함수 정의시 사용 : register, login, logout 은 모두 비동기 함수임 \n    builder\n    // register(회원가입) 성공 -> isLoggedIn = false 저장\n    .addCase(register.fulfilled, state => {\n      state.isLoggedIn = false;\n    })\n    // register(회원가입) 실패 -> isLoggedIn = false 저장\n    .addCase(register.rejected, state => {\n      state.isLoggedIn = false;\n    })\n    // login(로그인) 성공 -> (state.)isLoggedIn = true 저장\n    // login(로그인) 성공 -> (state.)user = (action.payload.)user 객체 저장\n    .addCase(login.fulfilled, (state, action) => {\n      state.isLoggedIn = true;\n      state.user = action.payload.user;\n    })\n    // login(로그인) 실패 -> (state.)isLoggedIn = false 저장\n    // login(로그인) 실패 -> (state.)user = null 저장\n    .addCase(login.rejected, (state, action) => {\n      state.isLoggedIn = false;\n      state.user = null;\n    })\n    // logout(로그인) 성공 -> (state.)isLoggedIn = false 저장\n    // logout(로그인) 성공 -> (state.)user = null 저장\n    .addCase(logout.fulfilled, state => {\n      state.isLoggedIn = false;\n      state.user = null;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authService","user","JSON","parse","localStorage","getItem","register","thunkAPI","response","data","error","message","toString","rejectWithValue","login","logout","initialState","isLoggedIn","authSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","rejected","action","payload","reducer"],"sources":["C:/Work/07_Si/03_SimpleDMS_Login/01_Login/frontend-react-new/src/store/slices/auth.ts"],"sourcesContent":["/* C:\\Work\\07_Si\\03_SimpleDMS_Login\\01_Login\\frontend-react-new\\src\\store\\slices\\auth.ts */\n// TODO: import\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport IUser from \"../../types/auth/IUser\";\nimport authService from \"../../services/auth/authService\";\nimport IAuth from \"../../types/auth/IAuth\";\n\n// 로컬스토리지에서 user 라는 키이름으로 값 가져오기 : 결과 (문자열) -> 객체로 변환\n// user : 웹토큰 있음\n// 사용법 : JSON.parse(문자열객체) => 문자열객체 -> 실제객체로 변환\nconst user = JSON.parse(localStorage.getItem(\"user\") || \"null\");\n// TODO: ------------------- 공유함수 정의 ---------------------\n// TODO: 회원가입 공유함수 (비동기함수) :\n//  TODO :코드 해석:\n//  createAsyncThunk(함수명, 화살표함수(변수, thunkAPI)=>{실행문}) - 리덕스 비동기 함수 적용\n//  thunkAPI 역할 : 에러메세지 처리 -> thunkAPI.rejectWithValue(에러메세지)\n//  async () => { await 함수명 };\n\n// 비동기함수 처리방법(2가지)\n// 1) 비동기함수 처리 : promise -> 함수실행.then().catch() TODO: 채택\n// 2) 비동기함수 처리 : async () => { await 함수실행 }\nexport const register = createAsyncThunk(\n  \"auth/register\",\n  async (user: IUser, thunkAPI) => {\n    try {\n      const response = await authService.register(user); // 회원가입함수 실행\n      return response.data; // 백엔드 결과값\n    } catch (error: any) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(\"register 시 에러가 발생하였습니다.\");\n    }\n  }\n);\n\n// TODO : 로그인 공유함수(비동기함수)\nexport const login = createAsyncThunk(\n  \"auth/login\", // 함수명\n  async (user: IUser, thunkAPI) => {\n    // 비동기함수\n    try {\n      const data = await authService.login(user); // 백엔드 login 요청\n      return { user: data }; // 백엔드 결과\n    } catch (error: any) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n      return thunkAPI.rejectWithValue(\"login 시 에러가 발행했습니다.\");\n    }\n  }\n);\n\n// TODO : 로그아웃 공유함수(비동기함수)\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await authService.logout(); // 로그아웃 함수 실행(리턴값 없음)\n});\n\n// TODO: ------------------- 공유변수 정의 ---------------------\n// TODO : 공유변수 초기값 정의 : { isLoggedIn: true/false, user: user/null }\n// TODO : user <= 로컬스토리지의 값\n// user 가 있으면(로그인했으면) initialState = { isLoggedIn: true, user: user }\n// user 가 없으면(로그아웃했으면) initialState = { isLoggedIn: false, user: null }\nconst initialState: IAuth = user\n  ? { isLoggedIn: true, user }\n  : { isLoggedIn: false, user: null };\n\n/* TODO: 현재 계정의 접속 상태 관리 코드 */ \n// todo: 실제 공유저장소 (리듀서 정의) : 공유변수의 값을 정의\nconst authSlice = createSlice({\n    name: \"auth\",                  // 리듀서 이름 : auth\n    initialState,                  // 위에서 3항연산자로 정의한 초기객체\n    reducers: {},                  // 동기함수 정의할때 사용하는 속성\n    // todo : 사용법 builder.addCase(비동기함수명.fulfilled, 화살표함수) : 비동기함수 성공시  화살표함수 실행됨\n    // todo : 사용법 builder.addCase(비동기함수명.rejected, 화살표함수)  : 비동기함수 실패시  화살표함수 실행됨\n    extraReducers: (builder) => {  // 비동기함수 정의시 사용 : register, login, logout 은 모두 비동기 함수임 \n      builder\n      // register(회원가입) 성공 -> isLoggedIn = false 저장\n        .addCase(register.fulfilled, (state) => {\n          state.isLoggedIn = false;\n        })\n      // register(회원가입) 실패 -> isLoggedIn = false 저장\n        .addCase(register.rejected, (state) => {\n          state.isLoggedIn = false;\n        })\n      // login(로그인) 성공 -> (state.)isLoggedIn = true 저장\n      // login(로그인) 성공 -> (state.)user = (action.payload.)user 객체 저장\n        .addCase(login.fulfilled, (state, action) => {\n          state.isLoggedIn = true;\n          state.user = action.payload.user;\n        })\n      // login(로그인) 실패 -> (state.)isLoggedIn = false 저장\n      // login(로그인) 실패 -> (state.)user = null 저장\n        .addCase(login.rejected, (state, action) => {\n          state.isLoggedIn = false;\n          state.user = null;\n        })\n      // logout(로그인) 성공 -> (state.)isLoggedIn = false 저장\n      // logout(로그인) 성공 -> (state.)user = null 저장\n        .addCase(logout.fulfilled, (state) => {\n          state.isLoggedIn = false;\n          state.user = null;\n        });\n    },\n  });\n  \n  export default authSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}